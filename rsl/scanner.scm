;; Author: Isaac H. Lopez Diaz <isaac.lopez@upr.edu>
;; Descrtiption: Scanner for hot lang
(load "helpers.scm")
(load "ehandler.scm")

;; main struct of token
;; 4 tuple: (lexeme, category, row-number, col-number)
(define-structure token lex cat row col)

;; main scanner function
(define scanner
  (lambda (code)
    (scanner-b code 0 0)))

;; helper function for scanner
(define scanner-b
  (lambda (code row col)
    (cond
     ((null? code) '()) ; eof
     ((char=? #\newline (car code)) (scanner-b (cdr code) (+ row 1) 0))
     ((or (char=? #\space (car code))
	  (char=? #\tab (car code)))
      (scanner-b (cdr code) row (+ col 1)))
     ((char=? #\< (car code))
      (if (char=? #\= (cadr code))
	  (cons (make-token "<=" 'lteq row (+ col 2))
		(scanner-b (cddr code) row (+ col 2)))
	  (cons (make-token "<" 'lt row (+ col 1))
		(scanner-b (cdr code) row (+ col 1)))))
     ((char=? #\> (car code))
      (if (char=? #\= (cadr code))
	  (cons (make-token ">=" 'gteq row (+ col 2))
		(scanner-b (cddr code) row (+ col 2)))
	  (cons (make-token ">" 'gt row (+ col 1))
		(scanner-b (cdr code) row (+ col 1)))))
     ((char=? #\+ (car code))
      (cons (make-token "+" 'plus row (+ col 1))
	    (scanner-b (cdr code) row (+ col 1))))
     ((char=? #\- (car code))
      (cons (make-token "-" 'minus row (+ col 1))
	    (scanner-b (cdr code) row (+ col 1))))
     ((char=? #\* (car code))
      (if (char=? #\* (cadr code))
	  (cons (make-token "**" 'exp row (+ col 2))
		(scanner-b (cddr code) row (+ col 2)))
	  (cons (make-token "*" 'star row (+ col 1))
		(scanner-b (cdr code) row (+ col 1)))))
     ((char=? #\= (car code))
      (if (char=? #\> (cadr code))
	  (cons (make-token "=>" 'impl row (+ col 2))
		(scanner-b (cddr code) row (+ col 2)))
	  (cons (make-token "=" 'eq row (+ col 1))
		(scanner-b (cdr code) row (+ col 1)))))
     ((char=? #\~ (car code))
      (if (char=? #\= (cadr code))
	  (cons (make-token "~=" 'noteq row (+ col 2))
		(scanner-b (cddr code) row (+ col 2)))
	  (cons (make-token "~" 'not row (+ col 1))
		(scanner-b (cdr code) row (+ col 1)))))
     ((char=? #\/ (car code))
      (if (char=? #\\ (cadr code))
	  (cons (make-token "/\\" 'and row (+ col 2))
		(scanner-b (cddr code) row (+ col 2)))
	  (cons (make-token "/" 'div row (+ col 1))
		(scanner-b (cdr code) row (+ col 1)))))
     ((char=? #\\ (car code))
      (if (char=? #\/ (cadr code))
	  (cons (make-token "\\/" 'or row (+ col 2))
		(scanner-b (cddr code) row (+ col 2)))
	  (cons (make-token "\\" 'rem row (+ col 1))
		(scanner-b (cdr code) row (+ col 1)))))
     ((char-alphabetic? (car code))
      (let ((word (take-while char-alphabetic? code))
	    (rst (drop-while char-alphabetic? code)))
	(let ((tok (scan-keyword-or-ident word row col)))
	  (cons tok
		(scanner-b rst (token-row tok) (token-col tok))))))
     ((char-numeric? (car code))
      (let ((num&rst (scan-number code row col)))
	(cons (car num&rst)
	      (scanner-b (second num&rst)
			 (token-row (car num&rst))
			 (+ 1 (token-col (car num&rst))))))))))

;; helper to scan keyword or identifier
(define scan-keyword-or-ident
  (lambda (word-lst row col)
    (let ((word (list->string word-lst)))
      (cond
       ((string=? word "Bool")
	(make-token "Bool" 'type row (+ col 4)))
       ((string=? word "Char")
	(make-token "Char" 'type row (+ col 4)))
       ((string=? word "Int")
	(make-token "Int" 'type row (+ col 3)))
       ((string=? word "Nat")
	(make-token "Nat" 'type row (+ col 3)))
       ((string=? word "Real")
	(make-token "Real" 'type row (+ col 4)))
       ((string=? word "Text")
	(make-token "Text" 'type row (+ col 4)))
       ((string=? word "Unit")
	(make-token "Unit" 'type row (+ col 4)))
       ((string=? word "axiom")
	(make-token "axiom" 'axiomkw row (+ col 5)))
       ((string=? word "abs")
	(make-token "abs" 'abskw row (+ col 3)))
       ((string=? word "chaos")
	(make-token "chaos" 'chaoskw row (+ col 5)))
       ((string=? word "class")
	(make-token "class" 'classkw row (+ col 5)))
       ((string=? word "end")
	(make-token "end" 'endkw row (+ col 3)))
       ((string=? word "if")
	(make-token "if" 'ifkw row (+ col 2)))
       ((string=? word "int")
	(make-token "int" 'intkw row (+ col 3)))
       ((string=? word "real")
	(make-token "real" 'realkw row (+ col 4)))
       ((string=? word "then")
	(make-token "then" 'thenkw row (+ col 4)))
       ((string=? word "else")
	(make-token "else" 'elsekw row (+ col 4)))
       ((string=? word "value")
	(make-token "value" 'valuekw row (+ col 5)))
       ((string=? word "variable")
	(make-token "variable" 'variablekw row (+ col 8)))
       ((string=? word "read")
	(make-token "read" 'readkw row (+ col 4)))
       ((string=? word "write")
	(make-token "write" 'writekw row (+ col 5))) 
       ((string=? word "post")
	(make-token "post" 'postkw row (+ col 4)))
       ((string=? word "pre")
	(make-token "pre" 'prekw row (+ col 3)))
       (else
	(make-token word 'id row (+ col (string-length word))))))))

;; helper to scan number and make token
(define scan-number
  (lambda (code row col)
    (let ((num (take-while char-numeric? code))
	  (rst (drop-while char-numeric? code)))
      (if (and (char=? #\. (car rst))
	       (char-numeric? (second rst)))
	  (let ((dec (take-while char-numeric? (cdr rst)))
		(decrst (drop-while char-numeric? (cdr rst))))
	    (list (make-token (list->string (append num dec))
			      'number
			      row
			      (+ col (length (append num dec))))
		  decrst))
	  (list (make-token num 'number row (+ col (length num)))
		rst)))))

