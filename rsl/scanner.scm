;; Author: Isaac H. Lopez Diaz <isaac.lopez@upr.edu>
;; Descrtiption: Scanner for hot lang
(load "helpers.scm")
(load "ehandler.scm")

;; main scanner function
(define scanner
  (lambda (code)
    (scanner-b code 0 0)))

;; helper function for scanner
(define scanner-b
  (lambda (code row col)
    (cond
     ((null? code) '()) ; eof
     ((char=? #\newline (car code)) (scanner-b (cdr code) (+ row 1) 0))
     ((char=? #\space (car code)) (scanner-b (cdr code) row (+ col 1)))
     ((char=? #\tab (car code)) (scanner-b (cdr code) row (+ col 1)))
     ((char=? #\( (car code))
      (cons (make-token (car code) 'lparen row (+ col 1))
	    (scanner-b (cdr code) row (+ col 1))))
     ((char=? #\) (car code))
      (cons (make-token (car code) 'rparen row (+ col 1))
	    (scanner-b (cdr code) row (+ col 1))))
     ((char=? #\{ (car code))
      (cons (make-token (car code) 'lbrace row (+ col 1))
	    (scanner-b (cdr code) row (+ col 1))))
     ((char=? #\} (car code))
      (cons (make-token (car code) 'rbrace row (+ col 1))
	    (scanner-b (cdr code) row (+ col 1))))
     ((char=? #\, (car code))
      (cons (make-token (car code) 'comma row (+ col 1))
	    (scanner-b (cdr code) row (+ col 1))))
     ((char=? #\# (car code))
      (cons (make-token "#" 'pound row (+ col 1))
	    (scanner-b (cdr code) row (+ col 1))))
     ((char=? #\+ (car code))
      (if (char=? #\+ (second code))
	  (cons (make-token "++" 'plusplus row (+ col 2))
		(scanner-b (cdr (cdr code)) row (+ col 2)))
	  (cons (make-token "+" 'plus row (+ col 1))
		(scanner-b (cdr code) row (+ col 1)))))
     ((char=? #\: (car code))
      (if (char=? #\- (second code))
	  (cons (make-token ":-" 'dot row (+ col 2))
		(scanner-b (cdr (cdr code)) row (+ col 2)))
	  (cons (make-token ":" 'colon row (+ col 1))
		(scanner-b (cdr code) row (+ col 1)))))
     ((char=? #\* (car code))
      (if (char=? #\* (second code))
	  (cons (make-token "**" 'pow row (+ col 2))
		(scanner-b (cdr (cdr code)) row (+ col 2)))
	  (cons (make-token "*" 'mult row (+ col 1))
		(scanner-b (cdr code) row (+ col 1)))))
     ((char=? #\| (car code))
      (let ((bar&rst (scan-bar (cdr code) row col)))
	(let ((tok (car bar&rst))
	      (rst (second bar&rst)))
	  (cons tok
		(scanner-b rst (token-row tok) (token-col col))))))
     ((char-alphabetic? (car code))
      (let ((word (take-while char-alphabetic? code))
	    (rst (drop-while char-alphabetic? code)))
	(let ((tok (scan-keyword-or-ident word row col)))
	  (cons tok
		(scanner-b rst (token-row tok) (token-col tok))))))
     ((char=? #\- (car code))
      (let ((min&rst (scan-min (cdr code) row col)))
	(cons (car min&rst)
	      (scanner-b (second min&rst)
			 (token-row (car min&rst))
			 (token-col (car min&rst))))))
     ((char-numeric? (car code))
      (let ((num&rst (scan-number code row col)))
	(cons (car num&rst)
	      (scanner-b (second num&rst)
			 (token-row (car num&rst))
			 (+ 1 (token-col (car num&rst))))))))))

;; helper to scan keyword or identifier
(define scan-keyword-or-ident
  (lambda (word-lst row col)
    (let ((word (list->string word-lst)))
      (cond
       ((string=? word "Bool")
	(make-token "Bool" 'Bool row (+ col 4)))
       ((string=? word "Char")
	(make-token "Char" 'Char row (+ col 4)))
       ((string=? word "Int")
	(make-token "Int" 'Int row (+ col 3)))
       ((string=? word "Nat")
	(make-token "Nat" 'Nat row (+ col 3)))
       ((string=? word "Real")
	(make-token "Real" 'Real row (+ col 4)))
       ((string=? word "Text")
	(make-token "Text" 'Text row (+ col 4)))
       ((string=? word "Unit")
	(make-token "Unit" 'Unit row (+ col 4)))
       ((string=? word "abs")
	(make-token "abs" 'abs row (+ col 3)))
       ((string=? word "all")
	(make-token "all" 'all row (+ col 3)))
       ((string=? word "always")
	(make-token "always" 'always row (+ col 3)))
       ((string=? word "any")
	(make-token "any" 'any row (+ col 3)))
       ((string=? word "as")
	(make-token "as" 'as row (+ col 2)))
       ((string=? word "axiom")
	(make-token "axiom" 'axiom row (+ col 5)))
       ((string=? word "card")
	(make-token "card" 'card row (+ col 4)))
       ((string=? word "case")
	(make-token "case" 'case row (+ col 4)))
       ((string=? word "channel")
	(make-token "channel" 'channel row (+ col 7)))
       ((string=? word "chaos")
	(make-token "chaos" 'chaos row (+ col 5)))
       ((string=? word "class")
	(make-token "class" 'class row (+ col 5)))
       ((string=? word "do")
	(make-token "do" 'do row (+ col 2)))
       ((string=? word "dom")
	(make-token "dom" 'dom row (+ col 3)))
       ((string=? word "elems")
	(make-token "elems" 'dom row (+ col 5)))
       ((string=? word "else")
	(make-token "else" 'else row (+ col 4)))
       ((string=? word "elsif")
	(make-token "elsif" 'elsif row (+ col 5)))
       ((string=? word "end")
	(make-token "end" 'end row (+ col 3)))
       ((string=? word "exists")
	(make-token "exists" 'exists row (+ col 6)))
       ((string=? word "extend")
	(make-token "extend" 'extend row (+ col 6)))
       ((string=? word "false")
	(make-token "false" 'false row (+ col 5)))
       ((string=? word "for")
	(make-token "for" 'for row (+ col 3)))
       ((string=? word "forall")
	(make-token "forall" 'forall row (+ col 6)))
       ((string=? word "hd")
	(make-token "hd" 'hd row (+ col 2)))
       ((string=? word "hide")
	(make-token "hide" 'hide row (+ col 4)))
       ((string=? word "if")
	(make-token "if" 'if row (+ col 2)))
       ((string=? word "in")
	(make-token "in" 'in row (+ col 2)))
       ((string=? word "inds")
	(make-token "inds" 'inds row (+ col 4)))
       ((string=? word "is")
	(make-token "is" 'is row (+ col 2)))
       ((string=? word "isin")
	(make-token "isin" 'isin row (+ col 4)))
       ((string=? word "initialise")
	(make-token "initialise" 'initialise row (+ col 10)))
       ((string=? word "int")
	(make-token "int" 'int row (+ col 3)))
       ((string=? word "inter")
	(make-token "inter" 'inter row (+ col 5)))
       ((string=? word "len")
	(make-token "len" 'len row (+ col 3)))
       ((string=? word "let")
	(make-token "let" 'let row (+ col 3)))
       ((string=? word "local")
	(make-token "local" 'local row (+ col 5)))
       ((string=? word "object")
	(make-token "object" 'object row (+ col 6)))
       ((string=? word "of")
	(make-token "of" 'of row (+ col 2)))
       ((string=? word "out")
	(make-token "out" 'out row (+ col  3)))
       ((string=? word "post")
	(make-token "post" 'post row (+ col 4)))
       ((string=? word "pre")
	(make-token "pre" 'pre row (+ col 3)))
       ((string=? word "read")
	(make-token "read" 'read row (+ col 4)))
       ((string=? word "real")
	(make-token "real" 'real row (+ col 4)))
       ((string=? word "rng")
	(make-token "rng" 'rng row (+ col 3)))
       ((string=? word "scheme")
	(make-token "scheme" 'scheme row (+ col 6)))
       ((string=? word "skip")
	(make-token "skip" 'skip row (+ col 4)))
       ((string=? word "stop")
	(make-token "stop" 'stop row (+ col 4)))
       ((string=? word "swap")
	(make-token "swap" 'swap row (+ col 4)))
       ((string=? word "then")
	(make-token "then" 'then row (+ col 4)))
       ((string=? word "tl")
	(make-token "tl" 'tl row (+ col 2)))
       ((string=? word "true")
	(make-token "true" 'true row (+ col 4)))
       ((string=? word "type")
	(make-token "type" 'type row (+ col 4)))
       ((string=? word "union")
	(make-token "union" 'union row (+ col 5)))
       ((string=? word "until")
	(make-token "until" 'until row (+ col 5)))
       ((string=? word "use")
	(make-token "use" 'use row (+ col 3)))
       ((string=? word "value")
	(make-token "value" 'value row (+ col 5)))
       ((string=? word "variable")
	(make-token "variable" 'variable row (+ col 8)))
       ((string=? word "while")
	(make-token "while" 'while row (+ col 5)))
       ((string=? word "with")
	(make-token "with" 'with row (+ col 4)))
       ((string=? word "write")
	(make-token "write" 'write row (+ col 5)))
       (else
	(make-token word 'id row (+ col (string-length word))))))))

;; helper to scan number and make token
(define scan-number
  (lambda (code row col)
    (let ((num (take-while char-numeric? code))
	  (rst (drop-while char-numeric? code)))
      (list (make-token num 'number row (+ col (length num)))
	    rst))))

;; helper to scan min, lambda or arrow
(define scan-min
  (lambda (code row col)
    (cond
     ((char=? #\> (car code))
      (list (make-token "->" 'arrow row (+ col 2))
	    (cdr code)))
     ((char=? #\m (car code))
      (if (and (char=? #\- (second code))
	       (char=? #\> (third code)))
	  (list (make-token "-m->" 'maparrow row (+ col 4))
		(drop 3 code))
	  (report scanner (string-append
			   (secode code)
			   (third code)
			   row
			   (+ col 3)))))
     ((char=? #\~ (car code))
      (if (and (char=? #\- (second code))
	       (char=? #\> (third code)))
	  (list (make-token "-~->" 'partialarrow row (+ col 4))
		(drop 3 code))))
     ((char=? #\\ (car code))
      (list (make-token "-\\" 'lambda row (+ col 2))
	    (cdr code)))
     ((string=? "inflist" (list->string (take-while char-alphabetic? code)))
      (list (make-token "-inflist" 'inflist row (+ col 8))
	    (drop 7 code)))
     ((string=? "list" (list->string (take-while char-alphabetic? code)))
      (list (make-token "-list" 'list row (+ col 5))
	    (drop 4 code)))
     (else
      (list (make-token "-" 'minus row (+ col 1))
	    (cdr code))))))

;; helper to scan bar ops
(define scan-bar
  (lambda (code row col)
    (cond
     ((char=? #\| (car code))
      (list (make-token "||" 'barbar row (+ col 2))
	    (cdr code)))
     ((char=? #\^ (car code))
      (if (char=? #\| (second code))
	  (list (make-token "|^|" 'barcarrot row (+ col 3))
		(drop 2 code))
	  (report scanner (char->name (second code)) row (+ col 2))))
     ((char=? #\= (car code))
      (if (char=? #\| (second code))
	  (list (make-toke "|=|" 'bareqbar row (+ col 3))
		(cdr (cdr code)))
	  (report scanner (char->name (second code)) row (+ col 2))))
     (else
      (report scanner (char->name (car code)) row (+ col 1))))))

;; main struct of token
;; 4 tuple: (lexeme, category, row-number, col-number)
(define-structure token lex cat row col)
